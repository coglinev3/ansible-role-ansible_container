---
# file: roles/ansible_container/handlesr/main.yml

- name: Cleanup apk_build_dependencies
  become: "{{ ansible_container_become }}"
  community.general.apk:
    name: build-dependencies
    state: absent

- name: "Alpine: Get all files from repository cache."
  ansible.builtin.find:
    paths: /var/cache/apk
    patterns: "*"
  register: files_to_delete
  listen: remove apk_cache

- name: "Alpine: Remove repository cache."
  become: "{{ ansible_container_become }}"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.files }}"
  loop_control:
    label: "{{ item.path }}"
  listen: remove apk_cache

- name: "Debian: Get all files from repository cache."
  become: "{{ ansible_container_become }}"
  ansible.builtin.find:
    paths: /var/lib/apt/lists
    patterns: "*"
  register: files_to_delete
  listen: remove apt_cache

- name: "Debian: Remove repository cache."
  become: "{{ ansible_container_become }}"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.files }}"
  loop_control:
    label: "{{ item.path }}"
  listen: remove apt_cache

- name: "RedHat: Clear repository cache."
  become: "{{ ansible_container_become }}"
  ansible.builtin.command: yum clean all
  changed_when: false
  failed_when: false
  listen: remove yum_cache

- name: Update sshd
  become: "{{ ansible_container_become }}"
  ansible.builtin.command: rc-update add sshd
  register: rc_update_output
  changed_when: rc_update_output.rc == 0
  failed_when: rc_update_output.rc != 0

- name: Get installed build dependencies
  become: "{{ ansible_container_become }}"
  ansible.builtin.shell: >
    set -o pipefail
    && cat /var/log/apt/history.log
    | grep Install
    | grep -v python-minimal
    | sed -e "s/^Install://"
    | sed -e "s/:\([^)]*),\?\)/\n/g"
  register: build_deps
  changed_when: build_deps.rc != 0
  failed_when: build_deps.rc != 0
  listen: remove apt_build_dependencies
  when:
    not (ansible_distribution == "Debian"
    and ansible_distribution_major_version == "8")

- name: Uninstall build dependencies
  become: "{{ ansible_container_become }}"
  ansible.builtin.apt:
    name: "{{ build_deps.stdout_lines }}"
    state: absent
  listen: remove apt_build_dependencies
  when:
    not (ansible_distribution == "Debian"
    and ansible_distribution_major_version == "8")
